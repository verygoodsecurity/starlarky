job-defaults: &job-defaults
  working_directory: &working_directory
    ~/starlarky
  test_results_directory: &test_results_directory
    /tmp/test-results
  dist_directory: &dist_directory
    /tmp/dist
  environment:
    DIST_PATH: *dist_directory
    TEST_RESULTS_PATH: *test_results_directory
    MAVEN_OPTS: -Xmx6400m
    GRAALVM_HOME: /home/circleci/starlarky/.graalvm
    HOMEBREW_REQUIRED_RUBY_VERSION: 2.4.6
    LARKY_LIB_HOME: /home/circleci/.larky/lib

machine-linux: &machine-linux
  machine:
      image: ubuntu-2204:2022.10.2 

install-java: &install-java
  run:
    name: Install OpenJDK17 and Maven
    command: |
      sudo apt-get update && sudo apt-get install openjdk-17-jdk maven
      sudo update-alternatives --set java /usr/lib/jvm/java-17-openjdk-amd64/bin/java
      sudo update-alternatives --set javac /usr/lib/jvm/java-17-openjdk-amd64/bin/javac

install-gh: &install-gh
  run:
    name: Install Go and ghr
    command: |
      sudo apt-get update && sudo apt-get install golang -y
      go get -u github.com/tcnksm/ghr

install-graalvm: &install-graalvm
  run:
    name: Install GraalVM
    command: |
      [ ! -d $GRAALVM_HOME ] \
        && curl https://github.com/graalvm/graalvm-ce-builds/releases/download/jdk-20.0.2/graalvm-community-jdk-20.0.2_linux-x64_bin.tar.gz -O -J -L \
        && tar xfz graalvm-community-jdk-20.0.2_linux-x64_bin.tar.gz \
        && mv graalvm-community-openjdk-20.0.2+9.1 .graalvm \
        && rm graalvm-community-jdk-20.0.2_linux-x64_bin.tar.gz \
        && $GRAALVM_HOME/bin/gu install native-image

build-quarkus-runnable: &build-quarkus-runnable
  run:
    name: Build binary for runlarky
    command: |
      if [ "${CIRCLE_TAG}" != "" ] ;
      then
        mvn versions:set-property -Dproperty=starlarky.version -DnewVersion=${CIRCLE_TAG} -pl runlarky
        mvn versions:set -DnewVersion=${CIRCLE_TAG} -pl runlarky
      fi
      mvn package -Pnative -DskipTests
      cp ./runlarky/target/larky-runner ./pylarky
    no_output_timeout: 30m

# Template to save Maven dependency cache to restore it in another jobs
save-maven-cache: &save-maven-cache
  save_cache:
    key: starlarky-{{ checksum "pom.xml" }}-{{ checksum "libstarlark/pom.xml" }}-{{ checksum "larky/pom.xml" }}
    paths:
      - ~/.m2

restore-maven-cache: &restore-maven-cache
  restore_cache:
    key: starlarky-{{ checksum "pom.xml" }}-{{ checksum "libstarlark/pom.xml" }}-{{ checksum "larky/pom.xml" }}

save-graalvm-cache: &save-graalvm-cache
  save_cache:
    key: starlarky-{{ checksum ".circleci/config.yml" }}
    paths:
      - $GRAALVM_HOME

restore-graalvm-cache: &restore-graalvm-cache
  restore_cache:
    key: starlarky-{{ checksum ".circleci/config.yml" }}

setup-maven-distributions: &setup-maven-distributions
  run:
    name: Setup distrubution servers for larky
    command: |
      mkdir -p ~/.m2
      cat <<EOF > ~/.m2/settings.xml
      <settings>
        <servers>
          <server>
            <id>github</id>
            <username>$GITHUB_USERNAME</username>
            <password>$GITHUB_API_TOKEN</password>
          </server>
        </servers>
      </settings>
      EOF

install_python: &install_python
  run:
    name: Install Python
    command: |
      git clone https://github.com/pyenv/pyenv.git ~/.pyenv
      echo 'export PYENV_ROOT="$HOME/.pyenv"' >> $BASH_ENV
      echo 'export PATH="$PYENV_ROOT/shims:$PYENV_ROOT/bin:$PATH"' >> $BASH_ENV
      ~/.pyenv/bin/pyenv install 3.8.6
      ~/.pyenv/bin/pyenv local 3.8.6
      curl -sSL https://install.python-poetry.org | python -
      echo 'export PATH="$HOME/.local/bin:$PATH"' >> $BASH_ENV

build_test_pylarky: &build_test_pylarky
  run:
    name: Build and test pylarky
    command: |
      set -x
      poetry version ${CIRCLE_TAG}
      poetry install > poetry_install.log
      poetry run pytest pylarky/tests
      poetry build

persist-dist: &persist-dist
  persist_to_workspace:
    root: *dist_directory
    paths:
      - "*"

attach-dist: &attach-dist
  attach_workspace:
    at: *dist_directory


# === JOBS ===
version: 2
jobs:
  build-and-test:
    <<: *job-defaults
    <<: *machine-linux
    steps:
      - checkout
      - <<: *install-java
      - <<: *restore-maven-cache
      - run: mkdir -p $TEST_RESULTS_PATH/junit/
      - run: mkdir -p $TEST_RESULTS_PATH/coverage/
      - run:
          name: Maven Build/Test
          command: |
            mvn clean install dependency:go-offline -T 2.0C -B
      - <<: *save-maven-cache
      - run: find . -type f -regex ".*/target/surefire-reports/.*xml" -exec cp {} $TEST_RESULTS_PATH/junit/ \;
      - run: find . -type f -regex ".*/target/surefire-reports/.*-output.txt" -exec cp {} $TEST_RESULTS_PATH/junit/ \;
      - run: find . -type f -regex ".*/target/site/.*" -exec cp --parents {} $TEST_RESULTS_PATH/coverage/ \;
      - store_artifacts:
          path: *test_results_directory
      - store_test_results:
          path: *test_results_directory

  build-and-test-docker:
    <<: *job-defaults
    machine: true
    steps:
      - checkout
      - <<: *restore-maven-cache
      - run: mkdir -p $TEST_RESULTS_PATH/junit/
      - run: mkdir -p $TEST_RESULTS_PATH/coverage/
      - run: docker-compose build
      - run: docker-compose run local bash /src/build-and-test-java.sh
      - <<: *save-maven-cache
      - run: find . -type f -regex ".*/target/surefire-reports/.*xml" -exec cp {} $TEST_RESULTS_PATH/junit/ \;
      - run: find . -type f -regex ".*/target/surefire-reports/.*-output.txt" -exec cp {} $TEST_RESULTS_PATH/junit/ \;
      - run: find . -type f -regex ".*/target/site/.*" -exec cp --parents {} $TEST_RESULTS_PATH/coverage/ \;
      - run: docker-compose run local bash /src/build-and-test-python.sh
      - store_artifacts:
          path: *test_results_directory
      - store_test_results:
          path: *test_results_directory

  build-dist-maven:
    <<: *job-defaults
    <<: *machine-linux
    steps:
      - checkout
      - <<: *install-java
      - <<: *restore-maven-cache
      - <<: *setup-maven-distributions
      - run:
          name: Build and deploy libstarlark
          command: |
            mvn versions:set -DnewVersion=${CIRCLE_TAG} -pl libstarlark
            mvn clean dependency:go-offline package -pl libstarlark -U -Dmaven.test.skip.exec -T 2.0C -B
            mvn deploy -DskipTests -pl libstarlark -Pgithub
      - run:
          name: Build and deploy larky
          command: |
            mvn versions:set-property -Dproperty=libstarlark.version -DnewVersion=${CIRCLE_TAG}
            mvn versions:set -DnewVersion=${CIRCLE_TAG} -pl larky
            mvn clean dependency:go-offline package -pl larky -U -Dmaven.test.skip.exec -T 2.0C -B
            mvn deploy -DskipTests -pl larky -Pgithub
      - <<: *save-maven-cache

  build-dist-linux:
    <<: *job-defaults
    <<: *machine-linux
    steps:
      - checkout
      - <<: *install-java
      - <<: *setup-maven-distributions
      - <<: *restore-maven-cache
      - <<: *restore-graalvm-cache
      - <<: *install-graalvm
      - <<: *save-graalvm-cache
      - <<: *build-quarkus-runnable
      - <<: *install_python
      - <<: *build_test_pylarky
      - run:
          name: Copy dist files
          command: |
            mkdir ${DIST_PATH}
            cp ./runlarky/target/larky-runner ${DIST_PATH}/larky-linux
            cp dist/*.whl ${DIST_PATH}
      - <<: *persist-dist

  build-dist-macos:
    <<: *job-defaults
    macos:
      xcode: 10.2.1
    steps:
      - checkout
      - run:
          name: Install dev
          command: |
            brew install openjdk@17
            brew install maven
      - run:
          name: Install GRAALVM
          command: |
            brew install --cask graalvm/tap/graalvm-ce-java17
            # Brew is designed to pull latest versions for the formula
            xattr -r -d com.apple.quarantine /Library/Java/JavaVirtualMachines/graalvm-ce-java17-*
            # We can use java_home exe to set GRAALVM_HOME
            echo 'export GRAALVM_HOME="$(/usr/libexec/java_home)"' >> $BASH_ENV
            source $BASH_ENV
            # add gu to PATH
            ln -s "$GRAALVM_HOME/bin/gu" /usr/local/bin
            gu install native-image
      - <<: *setup-maven-distributions
      - <<: *build-quarkus-runnable
      - <<: *install_python
      - <<: *build_test_pylarky
      - run:
          name: Copy dist files
          command: |
            mkdir -p ${DIST_PATH}
            cp ./runlarky/target/larky-runner ${DIST_PATH}/larky-macos
            cp dist/*.whl ${DIST_PATH}
      - <<: *persist-dist

  publish-to-gh:
    <<: *job-defaults
    docker:
      - image: cibuilds/github:0.13
    steps:
      - <<: *attach-dist
      - run:
          name: Create GH release
          command: |
            mv ${DIST_PATH}/larky-linux ${DIST_PATH}/larky-${CIRCLE_TAG}-linux
            # mv ${DIST_PATH}/larky-macos ${DIST_PATH}/larky-${CIRCLE_TAG}-macos
            ghr -draft -t ${GITHUB_API_TOKEN} -u ${CIRCLE_PROJECT_USERNAME} -r ${CIRCLE_PROJECT_REPONAME} -c ${CIRCLE_SHA1} -n ${CIRCLE_TAG} ${CIRCLE_TAG} ${DIST_PATH}

  publish-to-pypi:
    <<: *job-defaults
    docker:
      - image: circleci/python
    steps:
      - <<: *attach-dist
      - run:
          name: Install twine
          command: pip install twine
      - run:
          name: Upload packages
          command: twine upload -u __token__ -p ${PYPI_TOKEN} ${DIST_PATH}/*.whl

workflows:
  version: 2
  build_and_tests:
    jobs:
      - build-and-test
      - build-dist-linux:
          requires:
            - build-and-test

  release:
    jobs:
      - build-dist-maven:
          context: github-artifact-publisher
          filters:
            tags:
              only: /^\d+\.\d+\.\d+(?:-[a-zA-Z0-9_.]+){0,1}$/
            branches:
              ignore: /.*/
      - build-dist-linux:
          context: github-artifact-publisher
          filters:
            tags:
              only: /^\d+\.\d+\.\d+(?:-[a-zA-Z0-9_.]+){0,1}$/
            branches:
              ignore: /.*/
          requires:
            - build-dist-maven
      - publish-to-gh:
          context: github-artifact-publisher
          filters:
            tags:
              only: /^\d+\.\d+\.\d+(?:-[a-zA-Z0-9_.]+){0,1}$/
            branches:
              ignore: /.*/
          requires:
            - build-dist-linux
      - publish-to-pypi:
          filters:
            tags:
              only: DEPRECATED
            branches:
              ignore: /.*/
          requires:
            - build-dist-linux

