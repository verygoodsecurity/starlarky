job-defaults: &job-defaults
  working_directory: &working_directory
    ~/starlarky
  test_results_directory: &test_results_directory
    /tmp/test-results
  executable_results_directory: &executable_results_directory
    /tmp/executable-dir
  environment:
    - EXECUTABLE_RESULT_PATH: *executable_results_directory
    - TEST_RESULTS_PATH: *test_results_directory
    - MAVEN_OPTS: -Xmx6400m
    - GRAALVM_HOME: /home/circleci/starlarky/.graalvm

install-java: &install-java
  run:
    name: Install OpenJDK11 and Maven
    command: |
      sudo apt-get update && sudo apt-get install openjdk-11-jdk maven
      sudo update-alternatives --set java /usr/lib/jvm/java-11-openjdk-amd64/bin/java
      sudo update-alternatives --set javac /usr/lib/jvm/java-11-openjdk-amd64/bin/javac

install-gh: &install-gh
  run:
    name: Install Go and ghr
    command: |
      sudo apt-get update && sudo apt-get install golang -y
      go get -u github.com/tcnksm/ghr

install-graalvm: &install-graalvm
  run:
    name: Install GraalVM
    command: |
      [ ! -d $GRAALVM_HOME ] \
        && curl https://github.com/graalvm/graalvm-ce-builds/releases/download/vm-20.2.0/graalvm-ce-java11-linux-amd64-20.2.0.tar.gz -O -J -L \
        && tar xfz graalvm-ce-java11-linux-amd64-20.2.0.tar.gz \
        && mv graalvm-ce-java11-20.2.0 .graalvm \
        && rm graalvm-ce-java11-linux-amd64-20.2.0.tar.gz \
        && $GRAALVM_HOME/bin/gu install native-image

# Template to save Maven dependency cache to restore it in another jobs
save-maven-cache: &save-maven-cache
  save_cache:
    key: starlarky-{{ checksum "pom.xml" }}
    paths:
      - ~/.m2

restore-maven-cache: &restore-maven-cache
  restore_cache:
    key: starlarky-{{ checksum "pom.xml" }}

save-graalvm-cache: &save-graalvm-cache
  save_cache:
    key: starlarky-{{ checksum ".circleci/config.yml" }}
    paths:
      - $GRAALVM_HOME

restore-graalvm-cache: &restore-graalvm-cache
  restore_cache:
    key: starlarky-{{ checksum ".circleci/config.yml" }}

persist-workspace: &persist-workspace
  persist_to_workspace:
    root: .
    paths: "*"

attach-workspace: &attach-workspace
  attach_workspace:
    at: *working_directory

# === JOBS ===
version: 2
jobs:
  build:
    <<: *job-defaults
    machine:
      image: ubuntu-1604:202007-01
    steps:
      - checkout
      - <<: *install-java
      - <<: *restore-maven-cache
      - run:
          name: Maven Clean Package
          command: |
            mvn clean install -DskipTests dependency:go-offline -T 2.0C -B
      - <<: *save-maven-cache
      - <<: *persist-workspace
  test:
    <<: *job-defaults
    machine:
      image: ubuntu-1604:202007-01
    steps:
      - checkout
      - <<: *install-java
      - <<: *restore-maven-cache
      - run: mkdir -p $TEST_RESULTS_PATH/junit/
      - run: mkdir -p $TEST_RESULTS_PATH/coverage/
      - run:
          name: Maven Test
          command: |
            mvn test dependency:go-offline
      - run: find . -type f -regex ".*/target/surefire-reports/.*xml" -exec cp {} $TEST_RESULTS_PATH/junit/ \;
      - run: find . -type f -regex ".*/target/surefire-reports/.*-output.txt" -exec cp {} $TEST_RESULTS_PATH/junit/ \;
      - run: find . -type f -regex ".*/target/site/.*" -exec cp --parents {} $TEST_RESULTS_PATH/coverage/ \;
      - store_artifacts:
          path: *test_results_directory
      - store_test_results:
          path: *test_results_directory

  build-dist-linux:
    <<: *job-defaults
    machine:
      image: ubuntu-1604:202007-01
    steps:
      - checkout
      - <<: *install-java
      - <<: *attach-workspace
      - <<: *restore-maven-cache
      - <<: *restore-graalvm-cache
      - <<: *install-graalvm
      - <<: *save-graalvm-cache
      - run:
          name: Build (Native)
          command: mvn package -Pnative -DskipTests
          no_output_timeout: 30m
      - <<: *persist-workspace

  dist-test:
    <<: *job-defaults
    machine:
      image: ubuntu-1604:202007-01
    steps:
      - checkout
      - <<: *attach-workspace
      - run: cp ./larky/target/larky-runner .
      - run:
          name: Python test
          command: |
            python3 -m venv venv
            . ./venv/bin/activate
            pip install wheel twine pytest
            python setup.py bdist_wheel
            pip install ./dist/pylarky-nover-py3-none-any.whl
            pytest pylarky/tests

  dist-linux:
    <<: *job-defaults
    machine:
      image: ubuntu-1604:202007-01
    steps:
      - checkout
      - <<: *install-gh
      - <<: *attach-workspace
      - run: mkdir $EXECUTABLE_RESULT_PATH && cp ./larky/target/larky-runner $EXECUTABLE_RESULT_PATH/larky-${CIRCLE_TAG}-linux
      - run:
          name: Update GH tag artifact
          command: |
            if [ "${CIRCLE_TAG}" != "" ] ;
            then
              ghr -t $GITHUB_API_TOKEN ${CIRCLE_TAG} $EXECUTABLE_RESULT_PATH/larky-${CIRCLE_TAG}-linux
            fi
      - store_artifacts:
          path: *executable_results_directory

  dist-macos:
    <<: *job-defaults
    environment:
      - GRAALVM_HOME: /Library/Java/JavaVirtualMachines/graalvm-ce-java11-20.2.0/Contents/Home
      - EXECUTABLE_RESULT_PATH: *executable_results_directory
    macos:
      xcode: 12.0.1
    steps:
      - checkout
      - run:
          name: Install dev
          command: |
            brew install maven
            brew install ghr
      - run:
          name: Install GRAALVM
          command: |
            brew cask install graalvm/tap/graalvm-ce-java11
            xattr -r -d com.apple.quarantine /Library/Java/JavaVirtualMachines/graalvm-ce-java11-20.2.0
            $GRAALVM_HOME/bin/gu install native-image
      - run:
          name: Maven Clean Package
          command: |
            mvn clean install -DskipTests dependency:go-offline -T 2.0C -B
      - run:
          name: Build (Native)
          command: mvn package -Pnative -DskipTests
          no_output_timeout: 30m
      - run:
          name: Copy artifact
          command: |
            mkdir -p $EXECUTABLE_RESULT_PATH && cp ./larky/target/larky-runner $EXECUTABLE_RESULT_PATH/larky-${CIRCLE_TAG}-macos
      - run:
          name: Upload assets
          command: |
            if [ "${CIRCLE_TAG}" != "" ] ;
            then
              ghr -t $GITHUB_API_TOKEN ${CIRCLE_TAG} $EXECUTABLE_RESULT_PATH/larky-${CIRCLE_TAG}-macos
            fi
      - store_artifacts:
          path: *executable_results_directory

workflows:
  version: 2
  build_and_tests:
    jobs:
      - build:
          filters:
            tags:
              only: /^\d+\.\d+\.\d+(?:-[a-zA-Z0-9_.]+){0,1}$/
      - test
      - build-dist-linux:
          requires:
            - build
          filters:
            tags:
              only: /^\d+\.\d+\.\d+(?:-[a-zA-Z0-9_.]+){0,1}$/
      - dist-test:
          requires:
            - build-dist-linux
      - dist-linux:
          requires:
            - build-dist-linux
          filters:
            branches:
              only: master
            tags:
              only: /^\d+\.\d+\.\d+(?:-[a-zA-Z0-9_.]+){0,1}$/
      - dist-macos:
          requires:
            - build
          filters:
            branches:
              only: master
            tags:
              only: /^\d+\.\d+\.\d+(?:-[a-zA-Z0-9_.]+){0,1}$/
